{"data":{"post":{"id":"d08b47db-b240-5cd8-8376-c7e386e89bf6","html":"<p>Before I let you know about AsyncStorage, let me tell give an example of\nAsyncStorage. So that you can understand, what is the usage of AsyncStorage in\nany React Native App?</p>\n<p>You might have seen <strong>many applications offers login using Login ID or Password\nor any other way Like Facebook, Twitter, etc</strong>. So when you log in for the first\ntime in the app then after you close the app come back again on the app <strong>you\ndon’t need to log in again</strong>.</p>\n<p><strong>In React Native, your credentials accepted from AsyncStorage to log in again\nin the app.</strong></p>\n<p>So, Let’s get started with the official definition of AsyncStorage -</p>\n<h3>What is AsyncStorage?</h3>\n<p>AsyncStorage is key-value storage like local storage for the browser but on your\nphone.</p>\n<blockquote>\n<p>AsyncStorage is a key-value, asynchronous, simple, persistent,unencrypted,\nstorage system that is global to the app. It is used as a LocalStorage in Apps\nsimilar to localstorage in browser. It is very useful for the variables you want\nto use globally in the app.</p>\n</blockquote>\n<h3>Let’s Start implementing React Native with AyncStorage to persist Firebase</h3>\n<p>Credentials</p>\n<p>start project with React native CLI</p>\n<br>\n<h4>Create a simple login form</h4>\n<p>In our previous tutorials, we have used expo cli for our react native apps. So\ntoday, we are going to start again with that.</p>\n<p><strong>Open on VScode:</strong></p>\n<p>expo init react-native-auth</p>\n<p>**And run ** <code class=\"language-text\">yarn start</code></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*soZMJF7IQ7x-IJ-42ebUBQ.png\"></p>\n<p>The expo will open a new browser tab as shown below.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*iuuoZz7AWV7vi3wyp8sMfA.png\"></p>\n<p>Now, you can view all command for running Android and iOS simulators, history\nand console log output. You can run a virtual device from here as well as you\ncan use expo app on your phone and scan the QR Code to run the app in a real\ndevice.</p>\n<p>But I’m on Mac and already installed XCode pick iOS simulator. This is the\nfastest way that I used to run the app.</p>\n<h4>Let’s build the user interface quickly with NativeBase Elements</h4>\n<p>To develop our interface quickly, we are using Native base for development for\nthe form interface.</p>\n<p>install NativeBase with <code class=\"language-text\">npm i native-base</code></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*8iDnr9ZLg50ik1HxRGkcHg.png\"></p>\n<p>So now, we are ready to import the necessary Native base component inside our\nproject in <code class=\"language-text\">App.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Container<span class=\"token punctuation\">,</span> Form<span class=\"token punctuation\">,</span> Button<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"native-base\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>After importing, we will construct a user interface for the frontend form.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n     <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Container</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Form</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">full</span> <span class=\"token attr-name\">rounded</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">SignIn</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Form</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Container</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\nLet’s apply some <span class=\"token constant\">CSS</span> to make the button center<span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> StyleSheet<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        container<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          flex<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n          backgroundColor<span class=\"token punctuation\">:</span> <span class=\"token string\">\"#fff\"</span><span class=\"token punctuation\">,</span>\n           justifyContent<span class=\"token punctuation\">:</span> <span class=\"token string\">\"center\"</span>\n\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nWhen you save the result<span class=\"token punctuation\">,</span> you can see them instantly on the screen<span class=\"token punctuation\">.</span> This is a\nfeature called <span class=\"token keyword\">as</span> Hot<span class=\"token operator\">-</span>reloading<span class=\"token punctuation\">.</span>\n\n#### Store data on State\n\nWe create a state variable to handle the form submission<span class=\"token punctuation\">.</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          email<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n          password<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\nNext<span class=\"token punctuation\">,</span> <span class=\"token keyword\">get</span> input value and store on state <span class=\"token keyword\">with</span> an <span class=\"token operator\">**</span>onChangeText<span class=\"token operator\">**</span> event<span class=\"token punctuation\">.</span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span></span> <span class=\"token attr-name\">floatingLabel</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Label</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Email</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Label</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Input</span></span>\n                  <span class=\"token attr-name\">autoCapitalize</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>none<span class=\"token punctuation\">\"</span></span>\n                  <span class=\"token attr-name\">autoCorrect</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span>\n\n                <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Item</span></span><span class=\"token punctuation\">></span></span>\n              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span></span> <span class=\"token attr-name\">floatingLabel</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Label</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Password</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Label</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Input</span></span>\n                  <span class=\"token attr-name\">secureTextEntry</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></span>\n                  <span class=\"token attr-name\">autoCapitalize</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>none<span class=\"token punctuation\">\"</span></span>\n                  <span class=\"token attr-name\">autoCorrect</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span>\n\n                <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Item</span></span><span class=\"token punctuation\">></span></span>\n\nNow<span class=\"token punctuation\">,</span> create a SignIn <span class=\"token keyword\">function</span> that <span class=\"token keyword\">let</span> the users sign <span class=\"token keyword\">in</span> our app<span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">SignIn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">email<span class=\"token punctuation\">,</span> password</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n     <span class=\"token punctuation\">{</span>\n\n     response <span class=\"token operator\">=</span>\n     <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8000/api/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            method<span class=\"token punctuation\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n            headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"application/json\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            body<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n              email<span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span>\n              password<span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>password\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     res <span class=\"token operator\">=</span>\n     response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">{</span>\n\n     error <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n\n     error<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error \"</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\nWe are using fetch <span class=\"token keyword\">for</span> handling <span class=\"token constant\">HTTP</span> request that we currently send form\nvariable which stores <span class=\"token keyword\">in</span> a state variable to server side and got token back<span class=\"token punctuation\">.</span>\n\n<span class=\"token operator\">**</span>Next<span class=\"token punctuation\">,</span> trigger SignIn by pressing the button<span class=\"token punctuation\">.</span><span class=\"token operator\">**</span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">full</span> <span class=\"token attr-name\">rounded</span> <span class=\"token attr-name\">success</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> marginTop<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n                <span class=\"token attr-name\">onPress</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">SignUp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span>     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Signup</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span>\n\nAnd <span class=\"token keyword\">let</span>’s <span class=\"token keyword\">try</span> it<span class=\"token punctuation\">.</span> Now you can see the generated token <span class=\"token keyword\">with</span> an alert pop up on\nthe screen<span class=\"token punctuation\">.</span>\n\n<span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>cdn<span class=\"token operator\">-</span>images<span class=\"token operator\">-</span><span class=\"token number\">1.</span>medium<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>max<span class=\"token operator\">/</span><span class=\"token number\">800</span><span class=\"token operator\">/</span><span class=\"token number\">1</span><span class=\"token operator\">*</span>kikB_lW<span class=\"token operator\">-</span>r4Fk6ovTxaDeZA<span class=\"token punctuation\">.</span>gif<span class=\"token punctuation\">)</span>\n\nSo now<span class=\"token punctuation\">,</span> we got a token <span class=\"token keyword\">from</span> the server<span class=\"token punctuation\">.</span> Next<span class=\"token punctuation\">,</span> how we store it <span class=\"token keyword\">as</span> <span class=\"token keyword\">default</span> state\nor Asyncstorage<span class=\"token punctuation\">.</span>\n\n#### State variable vs AsyncStorage\n\nWe got token and we expect to use whenever token will expire on the server<span class=\"token punctuation\">.</span>\nFirst<span class=\"token punctuation\">,</span> we <span class=\"token keyword\">try</span> to store the token <span class=\"token keyword\">in</span> state variable<span class=\"token punctuation\">.</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          email<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n          password<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\nAnd store token on state\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> accessToken<span class=\"token punctuation\">:</span> res <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>accessToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\nTry it again<span class=\"token punctuation\">.</span> You can see on the screen<span class=\"token punctuation\">:</span>\n\n<span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>cdn<span class=\"token operator\">-</span>images<span class=\"token operator\">-</span><span class=\"token number\">1.</span>medium<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>max<span class=\"token operator\">/</span><span class=\"token number\">800</span><span class=\"token operator\">/</span><span class=\"token number\">1</span><span class=\"token operator\">*</span><span class=\"token number\">3</span>f_mOQ1v<span class=\"token operator\">-</span>JrmET8oS<span class=\"token operator\">-</span><span class=\"token number\">957</span>A<span class=\"token punctuation\">.</span>png<span class=\"token punctuation\">)</span>\n\nNow<span class=\"token punctuation\">,</span> Token will store <span class=\"token keyword\">in</span> the state<span class=\"token punctuation\">.</span> If we can use the state to store token <span class=\"token keyword\">for</span>\nnext refresh we can call it<span class=\"token punctuation\">.</span>\n\n    <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token is \"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>accessToken<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\nBut when you refresh the app then you can see <span class=\"token keyword\">in</span> the terminal<span class=\"token punctuation\">.</span> The token is\ngone…\n\n<span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>cdn<span class=\"token operator\">-</span>images<span class=\"token operator\">-</span><span class=\"token number\">1.</span>medium<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>max<span class=\"token operator\">/</span><span class=\"token number\">800</span><span class=\"token operator\">/</span><span class=\"token number\">1</span><span class=\"token operator\">*</span>ALXok1hqCl7<span class=\"token operator\">--</span>hi4XbY8Yg<span class=\"token punctuation\">.</span>png<span class=\"token punctuation\">)</span>\n\nSo<span class=\"token punctuation\">,</span> we can’t use the state <span class=\"token keyword\">for</span> store token<span class=\"token punctuation\">.</span> Let’s <span class=\"token keyword\">try</span> AsyncStorage <span class=\"token keyword\">for</span> storing\ntokens<span class=\"token punctuation\">.</span>\n\nFirstly<span class=\"token punctuation\">,</span> <span class=\"token keyword\">import</span> AsyncStorage <span class=\"token keyword\">in</span> React Native App<span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> StyleSheet<span class=\"token punctuation\">,</span> Text<span class=\"token punctuation\">,</span> AsyncStorage <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-native\"</span><span class=\"token punctuation\">;</span>\n\nCreate a <span class=\"token keyword\">default</span> variable to store access token<span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">const</span> AccessToken <span class=\"token operator\">=</span> <span class=\"token string\">\"Accest token Here\"</span><span class=\"token punctuation\">;</span>\n\nThen create two <span class=\"token keyword\">function</span> <span class=\"token operator\">**</span>setToken<span class=\"token operator\">**</span> and <span class=\"token operator\">**</span>getToken <span class=\"token operator\">**</span><span class=\"token keyword\">for</span> storing the data and\ngetting data<span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">storeToken</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">actk</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">await</span> AsyncStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span>AccessToken<span class=\"token punctuation\">,</span> actk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Something went wrong\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">async</span> <span class=\"token function\">getToken</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">actk</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> AsyncStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span>AccessToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Something went wrong\"</span><span class=\"token punctuation\">,</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\nThen replace after getting token <span class=\"token keyword\">from</span> the server<span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">storeToken</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\nWe expect that after refresh token will still live on storage<span class=\"token punctuation\">.</span>\n\n    <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token is \"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\nLet’s prove it<span class=\"token punctuation\">.</span> Look at it <span class=\"token keyword\">as</span> shown <span class=\"token keyword\">in</span> the pictures below<span class=\"token punctuation\">:</span>\n\n<span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>cdn<span class=\"token operator\">-</span>images<span class=\"token operator\">-</span><span class=\"token number\">1.</span>medium<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>max<span class=\"token operator\">/</span><span class=\"token number\">800</span><span class=\"token operator\">/</span><span class=\"token number\">1</span><span class=\"token operator\">*</span><span class=\"token number\">16</span>td7gF8fUKwDugWgNtK<span class=\"token operator\">-</span>w<span class=\"token punctuation\">.</span>gif<span class=\"token punctuation\">)</span>\n\nAwesome<span class=\"token punctuation\">,</span> now you can see <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span> The token is still alive on storage<span class=\"token punctuation\">.</span>\n\n#### Conclusion\n\nSo finally<span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span> tutorial<span class=\"token punctuation\">,</span> we discuss what is AsyncStorage<span class=\"token operator\">?</span> How AsyncStorage\nworks<span class=\"token operator\">?</span> How you can implement AsyncStorage <span class=\"token keyword\">in</span> react native app<span class=\"token punctuation\">.</span> If you got\nsomething <span class=\"token keyword\">from</span> <span class=\"token keyword\">this</span> tutorial then please share <span class=\"token keyword\">this</span> tutorial <span class=\"token keyword\">with</span> others<span class=\"token punctuation\">.</span> You\ncan also check out the official documentation on AsyncStorage<span class=\"token punctuation\">.</span> Click On\n<span class=\"token constant\">O</span><span class=\"token punctuation\">[</span>fficial docs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>facebook<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span>react<span class=\"token operator\">-</span>native<span class=\"token operator\">/</span>docs<span class=\"token operator\">/</span>asyncstorage<span class=\"token punctuation\">)</span> to\nknow about <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></code></pre></div>","fields":{"slug":"/persist-credentials-in-react-native-with-ayncstorage/","prefix":"2019-02-20"},"frontmatter":{"title":"Persist credentials in React Native with AyncStorage","author":"Krissanawat","category":"firebase","cover":{"childImageSharp":{"resize":{"src":"/static/aab2881d3cdbdf4197f4b54972ac3ebc/fbe2f/cover2.png"}}}}},"authornote":{"id":"69f359ba-3440-57a5-bfa0-59c48fa976df","html":"<p><strong>Mr. Kirssanawat</strong> just a react native developer , coffee addict , spend freetime writing for sharing knowledge</p>"},"site":{"siteMetadata":{"facebook":{"appId":"2198345126924491"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/persist-credentials-in-react-native-with-ayncstorage/","prev":{"id":"210c6a0f-cb97-5c28-b073-f1b59a83b5da","fields":{"slug":"/Email-Authentication-with-React-native-and-Firebase/","prefix":"2019-02-17","source":"posts"},"frontmatter":{"title":"Email Authentication with React native and Firebase","category":"firebase"}},"source":"posts"}}