{"data":{"post":{"id":"d08b47db-b240-5cd8-8376-c7e386e89bf6","html":"<p>Before I let you know about AsyncStorage, let me tell give an example of\nAsyncStorage. So that you can understand, what is the usage of AsyncStorage in\nany React Native App?</p>\n<p>You might have seen <strong>many applications offers login using Login ID or Password\nor any other way Like Facebook, Twitter, etc</strong>. So when you log in for the first\ntime in the app then after you close the app come back again on the app <strong>you\ndon’t need to log in again</strong>.</p>\n<p><strong>In React Native, your credentials accepted from AsyncStorage to log in again\nin the app.</strong></p>\n<p>So, Let’s get started with the official definition of AsyncStorage -</p>\n<h3>What is AsyncStorage?</h3>\n<p>AsyncStorage is key-value storage like local storage for the browser but on your\nphone.</p>\n<blockquote>\n<p>AsyncStorage is a key-value, asynchronous, simple, persistent,unencrypted,\nstorage system that is global to the app. It is used as a LocalStorage in Apps\nsimilar to localstorage in browser. It is very useful for the variables you want\nto use globally in the app.</p>\n</blockquote>\n<h3>Let’s Start implementing React Native with AyncStorage to persist Firebase</h3>\n<p>Credentials</p>\n<p>start project with React native CLI</p>\n<br>\n<h4>Create a simple login form</h4>\n<p>In our previous tutorials, we have used expo cli for our react native apps. So\ntoday, we are going to start again with that.</p>\n<p><strong>Open on VScode:</strong></p>\n<p>expo init react-native-auth</p>\n<p>**And run ** <code class=\"language-text\">yarn start</code></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*soZMJF7IQ7x-IJ-42ebUBQ.png\"></p>\n<p>The expo will open a new browser tab as shown below.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*iuuoZz7AWV7vi3wyp8sMfA.png\"></p>\n<p>Now, you can view all command for running Android and iOS simulators, history\nand console log output. You can run a virtual device from here as well as you\ncan use expo app on your phone and scan the QR Code to run the app in a real\ndevice.</p>\n<p>But I’m on Mac and already installed XCode pick iOS simulator. This is the\nfastest way that I used to run the app.</p>\n<h4>Let’s build the user interface quickly with NativeBase Elements</h4>\n<p>To develop our interface quickly, we are using Native base for development for\nthe form interface.</p>\n<p>install NativeBase with <code class=\"language-text\">npm i native-base</code></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*8iDnr9ZLg50ik1HxRGkcHg.png\"></p>\n<p>So now, we are ready to import the necessary Native base component inside our\nproject in <code class=\"language-text\">App.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Container<span class=\"token punctuation\">,</span> Form<span class=\"token punctuation\">,</span> Button<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"native-base\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>After importing, we will construct a user interface for the frontend form.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n     <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Container</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Form</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">full</span> <span class=\"token attr-name\">rounded</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">SignIn</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Form</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Container</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let’s apply some CSS to make the button center.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">    <span class=\"token keyword\">const</span> styles <span class=\"token operator\">=</span> StyleSheet<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        container<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          flex<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n          backgroundColor<span class=\"token punctuation\">:</span> <span class=\"token string\">\"#fff\"</span><span class=\"token punctuation\">,</span>\n           justifyContent<span class=\"token punctuation\">:</span> <span class=\"token string\">\"center\"</span>\n\n       <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When you save the result, you can see them instantly on the screen. This is a\nfeature called as Hot-reloading.</p>\n<h4>Store data on State</h4>\n<p>We create a state variable to handle the form submission.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          email<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n          password<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next, get input value and store on state with an <strong>onChangeText</strong> event.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span></span> <span class=\"token attr-name\">floatingLabel</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Label</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Email</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Label</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Input</span></span>\n                  <span class=\"token attr-name\">autoCapitalize</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>none<span class=\"token punctuation\">\"</span></span>\n                  <span class=\"token attr-name\">autoCorrect</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span>\n\n                <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Item</span></span><span class=\"token punctuation\">></span></span>\n              <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span></span> <span class=\"token attr-name\">floatingLabel</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Label</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Password</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Label</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Input</span></span>\n                  <span class=\"token attr-name\">secureTextEntry</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span></span>\n                  <span class=\"token attr-name\">autoCapitalize</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>none<span class=\"token punctuation\">\"</span></span>\n                  <span class=\"token attr-name\">autoCorrect</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span></span>\n\n                <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Item</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Now, create a SignIn function that let the users sign in our app.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">    <span class=\"token keyword\">async</span> <span class=\"token function\">SignIn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">email<span class=\"token punctuation\">,</span> password</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n     <span class=\"token punctuation\">{</span>\n\n     response <span class=\"token operator\">=</span>\n     <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8000/api/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            method<span class=\"token punctuation\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n            headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"application/json\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            body<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n              email<span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span>\n              password<span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>password\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     res <span class=\"token operator\">=</span>\n     response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">{</span>\n\n     error <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n\n     error<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error \"</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span></code></pre></div>\n<p>We are using fetch for handling HTTP request that we currently send form\nvariable which stores in a state variable to server side and got token back.</p>\n<p><strong>Next, trigger SignIn by pressing the button.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">full</span> <span class=\"token attr-name\">rounded</span> <span class=\"token attr-name\">success</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> marginTop<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n                <span class=\"token attr-name\">onPress</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">SignUp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span>     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Signup</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>And let’s try it. Now you can see the generated token with an alert pop up on\nthe screen.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*kikB_lW-r4Fk6ovTxaDeZA.gif\"></p>\n<p>So now, we got a token from the server. Next, how we store it as default state\nor Asyncstorage.</p>\n<h4>State variable vs AsyncStorage</h4>\n<p>We got token and we expect to use whenever token will expire on the server.\nFirst, we try to store the token in state variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          email<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n          password<span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span></code></pre></div>\n<p>And store token on state</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> accessToken<span class=\"token punctuation\">:</span> res <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>accessToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Try it again. You can see on the screen:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*3f_mOQ1v-JrmET8oS-957A.png\"></p>\n<p>Now, Token will store in the state. If we can use the state to store token for\nnext refresh we can call it.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">    <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token is \"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>accessToken<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>But when you refresh the app then you can see in the terminal. The token is\ngone…</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*ALXok1hqCl7--hi4XbY8Yg.png\"></p>\n<p>So, we can’t use the state for store token. Let’s try AsyncStorage for storing\ntokens.</p>\n<p>Firstly, import AsyncStorage in React Native App.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import { StyleSheet, Text, AsyncStorage } from &quot;react-native&quot;;</code></pre></div>\n<p>Create a default variable to store access token.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const AccessToken = &quot;Accest token Here&quot;;</code></pre></div>\n<p>Then create two function <strong>setToken</strong> and **getToken **for storing the data and\ngetting data.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">async storeToken(actk) {\n    try {\n      await AsyncStorage.setItem(AccessToken, actk);\n    } catch (error) {\n      console.log(&quot;Something went wrong&quot;, error);\n    }\n  }\n  async getToken(actk) {\n    try {\n      let token = await AsyncStorage.getItem(AccessToken);\n      console.log(token);\n    } catch (error) {\n      console.log(&quot;Something went wrong&quot;,error);\n    }\n  }</code></pre></div>\n<p>Then replace after getting token from the server.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">if (response.status &gt;= 200 &amp;&amp; response.status &lt; 300) {\n     this.storeToken(res);\n}</code></pre></div>\n<p>We expect that after refresh token will still live on storage.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">componentDidMount() {\n\nconsole.log(&quot;token is &quot;, this.getToken());\n\n}</code></pre></div>\n<p>Let’s prove it. Look at it as shown in the pictures below:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*16td7gF8fUKwDugWgNtK-w.gif\"></p>\n<p>Awesome, now you can see this. The token is still alive on storage.</p>\n<h4>Conclusion</h4>\n<p>So finally, in this tutorial, we discuss what is AsyncStorage? How AsyncStorage\nworks? How you can implement AsyncStorage in react native app. If you got\nsomething from this tutorial then please share this tutorial with others. You\ncan also check out the official documentation on AsyncStorage. Click On\nO<a href=\"https://facebook.github.io/react-native/docs/asyncstorage\">fficial docs</a> to\nknow about this.</p>\n<br>","fields":{"slug":"/persist-credentials-in-react-native-with-ayncstorage/","prefix":"2019-02-20"},"frontmatter":{"title":"Persist credentials in React Native with AyncStorage","author":"Krissanawat","category":"firebase","cover":{"childImageSharp":{"resize":{"src":"/static/aab2881d3cdbdf4197f4b54972ac3ebc/fbe2f/cover2.png"}}}}},"authornote":{"id":"69f359ba-3440-57a5-bfa0-59c48fa976df","html":"<p><strong>Mr. Kirssanawat</strong> just a react native developer , coffee addict , spend freetime writing for sharing knowledge</p>"},"site":{"siteMetadata":{"facebook":{"appId":"2198345126924491"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/persist-credentials-in-react-native-with-ayncstorage/","prev":{"id":"210c6a0f-cb97-5c28-b073-f1b59a83b5da","fields":{"slug":"/Email-Authentication-with-React-native-and-Firebase/","prefix":"2019-02-17","source":"posts"},"frontmatter":{"title":"Email Authentication with React native and Firebase","category":"firebase"}},"source":"posts"}}